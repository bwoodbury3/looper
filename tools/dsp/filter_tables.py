"""
Script to regenerate the filter tables. This can be done automatically with bazel
dependencies but I didn't want to lose yet another hour of my life to figuring
out where to find the runfiles at runtime.
"""

import argparse
import pathlib

from tools.dsp import butterworth
from tools.dsp.sim import SAMPLE_FREQ

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog="filter_tables")
    parser.add_argument(
        "--directory",
        type=str,
        required=True,
        help="The full path to the lookup table source in code ([something]/assets/filters."
    )
    return parser.parse_args()

args = parse_args()
directory = pathlib.Path(args.directory)
low_pass_path = directory / "low_pass.txt"

disclaimer = """
# THIS FILE IS AUTOGENERATED. DO NOT EDIT.
#
# Re-generate with:
# $ bazel run tools/dsp:filter_tables -- --directory=path/to/looper/assets/filters

"""

# LOW PASS

# Generate all filters from 15Hz to 5kHz at 44100Hz.
with open(low_pass_path, "w") as f:
    f.write(disclaimer)

    freq = 15.0
    while freq < 6000.0:
        denominator, numerator = butterworth.generate_filter(freq, 5, SAMPLE_FREQ)
        f.write(f"freq {freq:.02f}\n")
        f.write(" ".join(map(str, numerator)) + "\n")
        f.write(" ".join(map(str, denominator)) + "\n")

        # Increase freq by 10% on each call
        freq = freq * 1.1