"""
Script to regenerate the filter tables.

This can be done automatically with bazel dependencies but I didn't want to lose
yet another hour of my life to figuring out where to find the runfiles at
runtime.
"""

import argparse
import pathlib

from tools.dsp import butterworth
from tools.dsp import sim
from tools.dsp.sim import SAMPLE_FREQ

FILTER_ORDER = 5

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog="filter_tables")
    parser.add_argument(
        "--looper-path",
        type=str,
        required=True,
        help="The full path to looper source on disk (/path/to/looper)."
    )
    return parser.parse_args()

args = parse_args()
directory = pathlib.Path(args.looper_path)
low_pass_path = directory / "assets/filters/low_pass.txt"
low_pass_unit_tests_path = directory / "dat/low_pass/low_pass_unit_test.txt"

disclaimer = """
# THIS FILE IS AUTOGENERATED. DO NOT EDIT.
#
# Re-generate with:
# $ bazel run tools/dsp:filter_tables -- --looper-path=path/to/looper

"""

# LOW PASS

# Generate all filters from 15Hz to 5kHz at 44100Hz.
with open(low_pass_path, "w") as f:
    f.write(disclaimer)

    freq = 15.0
    while freq < 6000.0:
        denominator, numerator = butterworth.generate_filter(freq, FILTER_ORDER, SAMPLE_FREQ)
        f.write(f"freq {freq:.09f}\n")
        f.write(" ".join(map(lambda s : f"{s:.09e}", numerator)) + "\n")
        f.write(" ".join(map(lambda s : f"{s:.09e}", denominator)) + "\n")

        # Increase freq by 10% on each call
        freq = freq * 1.1

# Generate unit test data
with open(low_pass_unit_tests_path, "w") as f:
    # Choose a duration that gives us exactly 256 samples.
    duration = 256.001 / SAMPLE_FREQ
    sig = sim.gen_tone(duration, 440, 1.0) + \
            sim.gen_tone(duration, 800, 1.0) + \
            sim.gen_noise(duration, 0.3)
    sig = sim.to_f32(sig)

    # The filter frequency must be an entry in the lookup table.
    # Sorry this is a manual process.
    a, b = butterworth.generate_filter(510.059228792, FILTER_ORDER, SAMPLE_FREQ)
    filtered = sim.filter2(sig, a, b)

    # Input signal
    f.write(" ".join(map(lambda s : f"{s:.06f}", sig.tolist())) + "\n")
    # Output signal (filtered)
    f.write(" ".join(map(lambda s : f"{s:.06f}", filtered.tolist())) + "\n")
